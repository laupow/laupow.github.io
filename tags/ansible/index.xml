<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ansible on DevOps in Higher Ed</title>
    <link>https://laupow.github.io/tags/ansible/</link>
    <description>Recent content in Ansible on DevOps in Higher Ed</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://laupow.github.io/tags/ansible/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ansible Playbook Strategies</title>
      <link>https://laupow.github.io/2017/08/ansible-playbook-strategies/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://laupow.github.io/2017/08/ansible-playbook-strategies/</guid>
      <description>Below I&amp;rsquo;ve outline four useful but less common Ansible strategies. My primary use cases for Ansible are application configuration, application deployment, and local development environments. The patterns aren&amp;rsquo;t overly technical, nor do they rely on hacks. But they do represent a few unusual problems Ansible can help solve.
Skip Module Parameters With Omit Filter Say you have a playbook task that needs to accept multiple module parameters which are themselves incompatible.</description>
    </item>
    
  </channel>
</rss>