<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on DevOps in Higher Ed</title>
    <link>https://laupow.github.io/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on DevOps in Higher Ed</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://laupow.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GKE v1.13 Upgrade</title>
      <link>https://laupow.github.io/2019/05/gke-v1.13-upgrade/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://laupow.github.io/2019/05/gke-v1.13-upgrade/</guid>
      <description>We recently upgraded a Kubernetes cluster to GKE v1.13.5.
After the upgrade, the docker client was no longer responsive and crashed hard.
$ docker ps Segmentation fault (core dumped) Uh-oh.
This cluster runs a Jenkins instance which launches build containers in the cluster. Each build container eventually runs Docker commands like docker build -t ${env.IMAGE_NAME} -f path/to/Dockerfile . to build container images. We mount the Docker client into the build container from the Container-Optimized OS host VM.</description>
    </item>
    
    <item>
      <title>Beware of Identical Service Selectors</title>
      <link>https://laupow.github.io/2018/10/beware-of-identical-service-selectors/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://laupow.github.io/2018/10/beware-of-identical-service-selectors/</guid>
      <description>Label selectors on your Kubernetes Services should generally be unique. The Kubernetes Service docs outline occasions when selectors might not apply. But if you use selectors, you want each Service to select a unique backend. Otherwise, your traffic may not route properly
Case Study 50% of routine HTTP requests failed to reach the target backend inside of a Kubernetes cluster.
HTTP requests for resources likehttp://integration-tachyon/images/headshot.jpg never arrived at the backend for integration-tachyon.</description>
    </item>
    
  </channel>
</rss>