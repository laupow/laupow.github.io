<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps in Higher Ed</title>
    <link>https://laupow.github.io/</link>
    <description>Recent content on DevOps in Higher Ed</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://laupow.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GKE v1.13 Upgrade</title>
      <link>https://laupow.github.io/2019/05/gke-v1.13-upgrade/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://laupow.github.io/2019/05/gke-v1.13-upgrade/</guid>
      <description>We recently upgraded a Kubernetes cluster to GKE v1.13.5.
After the upgrade, the docker client was no longer responsive and crashed hard.
$ docker ps Segmentation fault (core dumped) Uh-oh.
This cluster runs a Jenkins instance which launches build containers in the cluster. Each build container eventually runs Docker commands like docker build -t ${env.IMAGE_NAME} -f path/to/Dockerfile . to build container images. We mount the Docker client into the build container from the Container-Optimized OS host VM.</description>
    </item>
    
    <item>
      <title>Beware of Identical Service Selectors</title>
      <link>https://laupow.github.io/2018/10/beware-of-identical-service-selectors/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://laupow.github.io/2018/10/beware-of-identical-service-selectors/</guid>
      <description>Label selectors on your Kubernetes Services should generally be unique. The Kubernetes Service docs outline occasions when selectors might not apply. But if you use selectors, you want each Service to select a unique backend. Otherwise, your traffic may not route properly
Case Study 50% of routine HTTP requests failed to reach the target backend inside of a Kubernetes cluster.
HTTP requests for resources likehttp://integration-tachyon/images/headshot.jpg never arrived at the backend for integration-tachyon.</description>
    </item>
    
    <item>
      <title>TLS misconfiguration: how CloudFront noticed first</title>
      <link>https://laupow.github.io/2018/05/tls-misconfiguration-how-cloudfront-noticed-first/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://laupow.github.io/2018/05/tls-misconfiguration-how-cloudfront-noticed-first/</guid>
      <description>&lt;p&gt;One day after a routine deployment our CloudFront URLs broke. The website was completely useless.
Requests to CloudFront, mostly for CSS and JS, were returning an HTTP 502 Bad Gateway error.
Thanks to Kubernetes, we quickly rolled back the botched deployment.
But how did a deployment break our CloudFront distribution?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://laupow.github.io/about/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://laupow.github.io/about/</guid>
      <description>Matt Lauer is a member of the Web Services team at Carleton College, and his primary focus is on infrastructure and automation tools used to power many of Carleton&amp;rsquo;s flagship web applications including Reason CMS, WordPress, Moodle, and Carleton&amp;rsquo;s identity portal.
Recently he&amp;rsquo;s been leading the implementation of Google Kubernetes Engine for WordPress as part of an initiative to migrate to WordPress as the primary campus CMS.</description>
    </item>
    
    <item>
      <title>Automating Ansible SSH key setup</title>
      <link>https://laupow.github.io/2017/10/automating-ansible-ssh-key-setup/</link>
      <pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://laupow.github.io/2017/10/automating-ansible-ssh-key-setup/</guid>
      <description>A small frustrationÂ with Ansible is the initial setup to procure ssh access to the remote hosts. Ansible is a great tool to automate all the things. However, it assumes you already have ssh access to the remote hosts. Say your operations team member writes an Ansible deploy playbook to share with the team. It works for the operations team member locally, but other users won&amp;rsquo;t be able to run the playbook until they also have ssh access to the remote hosts.</description>
    </item>
    
    <item>
      <title>Ansible Playbook Strategies</title>
      <link>https://laupow.github.io/2017/08/ansible-playbook-strategies/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://laupow.github.io/2017/08/ansible-playbook-strategies/</guid>
      <description>Below I&amp;rsquo;ve outline four useful but less common Ansible strategies. My primary use cases for Ansible are application configuration, application deployment, and local development environments. The patterns aren&amp;rsquo;t overly technical, nor do they rely on hacks. But they do represent a few unusual problems Ansible can help solve.
Skip Module Parameters With Omit Filter Say you have a playbook task that needs to accept multiple module parameters which are themselves incompatible.</description>
    </item>
    
  </channel>
</rss>